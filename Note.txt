https://styled-components.com/
https://stylis.js.org/
https://medium.com/building-crowdriff/styled-components-to-use-or-not-to-use-a6bb4a7ffc21
https://github.com/styled-components/jest-styled-components         <<< Need to rea this to see if you can do testing.


https://github.com/Annie-Huang/my-styled-components-tutorial
====================================================================
Up to: https://styled-components.com/docs/basics#coming-from-css


Learning from version 5:

C:\react>npx create-react-app my-styled-components-tutorial
C:\react\my-styled-components-tutorial>npm install --save styled-components


Adapting based on props:
    background: ${(props) => (props.primary ? 'palevioletred' : 'white')};

Extending Styles
    export const TomatoButton = styled(Button2)`...`

"as" polymorphic prop (introduced in v4): Will change the element name
    <Button3 as='a' href='/'>Link with Button styles</Button3>
    change to:
    <a href="/" class="sc-eCssSg bpkTHM">Link with Button styles</a>

"as" polymorphic prop works with custom components too!
    const ReversedButton = props => <Button {...props} children={props.children.split('').reverse()} />
    <Button4 as={ReversedButton}>
      Custom Button with Normal Button styles
    </Button4>

The styled method works perfectly on all of your own or any third-party component
as long as they attach the passed className prop to a DOM element.
    // This could be react-router-dom's Link for example
    export const Link = ({ className, children }) => (
      <a className={className}>{children}</a>
    );

Passed props: styled-components filters non-standard attributes and not to pass to DOM:
e.g.inputColor prop is not passed to the DOM, but type and defaultValue are.
    export const Input = styled.input`...`
    <Input defaultValue="@geelen" type="text" inputColor="rebeccapurple" />
    This will translate to (in devtool)
    <input type="text" class="sc-crrsfI itEbJL" value="@geelen">

Define Styled Components outside of the render method
    const StyledWrapper = styled.div`
      /* ... */
    `
    const Wrapper = ({ message }) => {
      return <StyledWrapper>{message}</StyledWrapper>
    }


























