https://styled-components.com/
https://stylis.js.org/
https://medium.com/building-crowdriff/styled-components-to-use-or-not-to-use-a6bb4a7ffc21

Need to read:
https://github.com/styled-components/jest-styled-components         <<< Need to rea this to see if you can do testing.
https://styled-components.com/docs/api#helpers                      <<< About create GlobalStyle

https://github.com/Annie-Huang/my-styled-components-tutorial
====================================================================
Up to: https://styled-components.com/docs/basics#attaching-additional-props


Learning from version 5:

C:\react>npx create-react-app my-styled-components-tutorial
C:\react\my-styled-components-tutorial>npm install --save styled-components

1.
Adapting based on props:
    background: ${(props) => (props.primary ? 'palevioletred' : 'white')};

2.
Extending Styles
    export const TomatoButton = styled(Button2)`...`

3.
"as" polymorphic prop (introduced in v4): Will change the element name
    <Button3 as='a' href='/'>Link with Button styles</Button3>
    change to:
    <a href="/" class="sc-eCssSg bpkTHM">Link with Button styles</a>

4.
"as" polymorphic prop works with custom components too!
    const ReversedButton = props => <Button {...props} children={props.children.split('').reverse()} />
    <Button4 as={ReversedButton}>
      Custom Button with Normal Button styles
    </Button4>

5.
The styled method works perfectly on all of your own or any third-party component
as long as they attach the passed className prop to a DOM element.
    <Link>Unstyled, boring Link</Link>
    <StyledLink>Styled, exciting Link</StyledLink>
    // This could be react-router-dom's Link for example
    export const Link = ({ className, children }) => (
      <a className={className}>{children}</a>
    );
    export const StyledLink = styled(Link)`
      color: palevioletred;
      font-weight: bold;
    `;

6.
Passed props: styled-components filters non-standard attributes and not to pass to DOM:
e.g.inputColor prop is not passed to the DOM, but type and defaultValue are.
    export const Input = styled.input`...`
    <Input defaultValue="@geelen" type="text" inputColor="rebeccapurple" />
    This will translate to (in devtool)
    <input type="text" class="sc-crrsfI itEbJL" value="@geelen">

7.
Define Styled Components outside of the render method to avoid recreation on every single render pass.
Defining a styled component within the render method will thwart caching and drastically slow down rendering speed, and should be avoided.
    const StyledWrapper = styled.div`
      /* ... */
    `
    const Wrapper = ({ message }) => {
      return <StyledWrapper>{message}</StyledWrapper>
    }

8.
Pseudoelements, pseudoselectors, and nesting:
    Check Thing.js. Interestingly I didn't know this before:
    <div className='something-else'>
      <Thing>Splendid.</Thing>
    </div>
    export const Thing = styled.div.attrs((/* props */) => ({ tabIndex: 0 }))`
      .something-else & {
          border: 1px solid; // Do border style on <Thing> element that is inside another element labeled ".something-else"
      }
    `

9.
If you put selectors in without the ampersand (the '&' sign), they will refer to children of the component.
    <Thing2>
      <label htmlFor='foo-button' className='something'>
        Mystery button
      </label>
      ...
    </Thing2>
    export const Thing2 = styled.div`
      .something {
        border: 1px solid; // an element labeled ".something" inside <Thing>
        display: block;
      }
    `;

10.
The ampersand (the '&' sign) can be used to increase the specificity of rules on the component; this can be useful if you are
dealing with a mixed styled-components and vanilla CSS environment where there might be conflicting styles:
    <GlobalStyle />
    <Thing3>
      I'm blue, da ba dee da ba daa
    </Thing3>
    const Thing3 = styled.div`
      && {
        color: blue;        <<< Higher specificity.
      }
    `
    export const GlobalStyle = createGlobalStyle`  // createGlobalStyle is available after v4, web only.
      div${Thing3} {
        color: red;
      }
    `;


11.
createGlobalStyle: things like CSS resets or base stylesheets can be applied.
https://styled-components.com/docs/api#helpers
    import { createGlobalStyle, ThemeProvider } from 'styled-components'
    const GlobalStyle = createGlobalStyle`
      body {
        color: ${props => (props.whiteColor ? 'white' : 'black')};
        font-family: ${props => props.theme.fontFamily};
      }
    `
    // later in your app
    <ThemeProvider theme={{ fontFamily: 'Helvetica Neue' }}>
      <React.Fragment>
        <Navigation /> {/* example of other top-level stuff */}
        <GlobalStyle whiteColor />
      </React.Fragment>
    </ThemeProvider>

12.
.attrs constructor: It allows you to attach additional props (or "attributes") to a component.
    <Input2 placeholder='A small text input' />
    <Input2 placeholder='A bigger text input' size='2em' />
    export const Input2 = styled.input.attrs((props) => ({      <<< Prop Factory
      type: 'text',
      size: props.size || '1em',
    }))`
      border: 2px solid palevioletred;
      /* here we use the dynamically computed prop */
      margin: ${(props) => props.size};
      padding: ${(props) => props.size};
    `;

13.
Overriding .attrs
Each wrapper to override nested uses of .attrs, similarly to how css properties defined later in a stylesheet override previous declarations.
    <Input2 placeholder='A bigger text input' size='2em' />
    <PasswordInput2 placeholder='A bigger password input' size='2em' />
    export const PasswordInput2 = styled(Input2).attrs({        <<< Prop Value
      type: 'password',
    })`
      // similarly, border will override Input's border
      border: 2px solid aqua;
    `;

14.
Animations: keyframe
    const rotate = keyframes`
      from {transform: rotate(0deg);}
      to {transform: rotate(360deg);}
    `;
    export const Rotate = styled.div`
      animation: ${rotate} 2s linear infinite;
    `;
Or you can do it inside:
    const SpinnerContainer = styled.div`
      svg {
        animation: rotation 2s infinite linear;
      }
      @keyframes rotation {
        from {transform: rotate(0deg);}
        to {transform: rotate(359deg);}
      }
    `;


A. When to use css`` and when no need to use it:
  ${props =>
    !props.disabled &&
    ` &:hover label{
        background-color: ${theme.colors.blueInfoLight};
        transition: background-color 0.1s ease-out;
        border-radius: ${theme.borders.borderRadiusSmall}px 0 0 ${theme.borders.borderRadiusSmall}px;
  }`}
  ${props =>
    props.vertical &&
    css`
      flex-direction: column;
      line-height: 20px;
    `}
  ${props =>
    !props.hasInlineLabel &&
    css`                                <<< I am confused.....
      &:hover:not(:focus) {
        border-radius: ${theme.borders.borderRadiusSmall}px;
      }
    `}















